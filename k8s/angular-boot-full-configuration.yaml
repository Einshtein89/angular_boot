apiVersion: v1
kind: Secret
metadata:
  namespace: books-store
  name: mongodb-secret
# Opaque - default type for key-value pairs
type: Opaque
data:
  mongo-root-username: dXNlcm5hbWU=
  mongo-root-password: cGFzc3dvcmQ=
---
#apiVersion: v1
#kind: Secret
#metadata:
#  namespace: books-store
#  name: tls-secret
## Opaque - default type for key-value pairs
#type: Opaque
#data:
#  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNwRENDQVl3Q0NRRDdtc0lyd0pMbmNUQU5CZ2txaGtpRzl3MEJBUXNGQURBVU1SSXdFQVlEVlFRRERBbGkKYjI5cmN5NWpiMjB3SGhjTk1qRXdOREEwTVRNMU1qUTBXaGNOTWpJd016TXdNVE0xTWpRMFdqQVVNUkl3RUFZRApWUVFEREFsaWIyOXJjeTVqYjIwd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUNYClZDeDdadjF1UkcwZ0JFb0w5MEVJNFMyVVJla090OVBPUnY4cS9tWlg2ZjduVWRndUdkR3lrWTkvUnMwS1FETXYKQ3JNK1ZQWXpjb2RzU0M1dGtTS0ZicksrN2tsNzJ5a3cxZUIvQzJ4a3lDeUhqTlcwRlJBM3dVOExFL0IwYlpDQgp6cnpOSnAwN0RXbEMxeXE3OE5RY2sxelY0aVdjNUdVSCtoZHdSU3pucWVjVzErbFhHdy9UWlpBNzdqWTJvUVlvCnk1RDJoRWdiMC81MFIwS2xkbzYySXFMSVZFZkRqb1ozUkZEaEIyK3J2REVvaEdPc3doOWV6cFNXLzltbkZ6K3oKeWhBcTRXOE14RVlPYzRONjdvRGpSNXBkMEJRYy91RjhmYkZnY0N1d0I1MUd2bU1jV0lWZ05BcXhTZnowZmlXKwpYbGdreE5CdnpMcHFYOFVTZmxqdEFnTUJBQUV3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUZ6YU5CNldNR014ClVxK1lldWFTd09CVWpXUmFvT1p3L0RCSittaWxpVno5NGxoU21qQzcyMU9ndkVKeWNiNEF3UUdRNWpJc3MrM1YKOHVFSUNHa2NhUU5raXJ2MGo2eFVtNUNjVlRhZUNLa2RlZGNZWTFxRklkSmdnWjNwTVJmUFFmcGJiZ2FmcHFkagptWGlMR3dRd3pYQXliU2JCNUg0QkFxR1pXTWZEUEZpUkdjdTEvdXc4TUh2eW05ZkZ5TmZLQ3lNMlB2NC8xTmNZClBtanJ4ZEhUN2NvTmszd0dyTFBsaU5sZk5JUFNEQkhXTStMdjBxNG04YzdjUW8wNXZMUndXa01NZnpHaDIwUEwKZ2M4ZlkySlloV1JrUGIvaDBOdzBCMWwrdzVxMmNUSFJMV2FIOUZqWXo4VmFTMklvajd2YUpybDhHK0hWa1FYVQpnckNkY2NodVFyUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
#  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBbDFRc2UyYjlia1J0SUFSS0MvZEJDT0V0bEVYcERyZlR6a2IvS3Y1bVYrbis1MUhZCkxoblJzcEdQZjBiTkNrQXpMd3F6UGxUMk0zS0hiRWd1YlpFaWhXNnl2dTVKZTlzcE1OWGdmd3RzWk1nc2g0elYKdEJVUU44RlBDeFB3ZEcyUWdjNjh6U2FkT3cxcFF0Y3F1L0RVSEpOYzFlSWxuT1JsQi9vWGNFVXM1Nm5uRnRmcApWeHNQMDJXUU8rNDJOcUVHS011UTlvUklHOVArZEVkQ3BYYU90aUtpeUZSSHc0NkdkMFJRNFFkdnE3d3hLSVJqCnJNSWZYczZVbHYvWnB4Yy9zOG9RS3VGdkRNUkdEbk9EZXU2QTQwZWFYZEFVSFA3aGZIMnhZSEFyc0FlZFJyNWoKSEZpRllEUUtzVW44OUg0bHZsNVlKTVRRYjh5NmFsL0ZFbjVZN1FJREFRQUJBb0lCQUdjQk81bnZ1M2VRQ2Z0dQpEL3pmR3h4eE1iWW9jLys1cnVsTXVDbEtxdDBTZ0poeHhFVjArNkNocGR4TGxBdHpNYVBHazhWTXpaeXRTM0t3Ckd6SW5SU2t2OVdrekJ6L1FLTlI5OEdacG55bG1lN0QwY3c0MS9Da0hZc2MybGtpWnYzQXNDYVZXc0ZWZXhwUmgKbzB2MEhGMHJEVmprcXhlRSt5UVgzbFprTDdHcmo1TXFvWFI5NFZKWGhIUHBabEhIcjNZdDBTMFZOK3pLc0hGNApFcW9TQWw5bjJINUN6NVAza3dNQStxV1pDVDNRb1NNOHBxMWZRZXY0QW9NQjBEMXcxVEhmZmtyd0dsMm5TVTc4CnRqaFJ6Wnd6a0RsNzJuSW9mREU5WkxsRXlaYnZtaEFBVXI1b2NxRTMrMm1PQzhNeGNRM3NoWFpvMWtTWjJzQ0QKS1BZb0t3RUNnWUVBeHNjTzZMbGZoSms3NTRsZU5qVERlcHkxSTl5SHRaRkVablZUQXpLTUcwQU11YW0zY0NtUQo0WnRPN284V2hqbTNicG92SklGblA1eEltU2cySkVBZngwbnIzRXFKTUt0TVlwUG4rb1dzdXR6ZnF6MzZFWlVlCnMrWmt1UWN5ekUyMnpKbWVFb045RkpMN0tMMjVnRTBZM2o5TFVMRFdRaTZHTlhzalMrZTJ3RUVDZ1lFQXd1UmYKSzZaODdlMDl6WnpJNTNla1RMYml0ODJ0R0szRk54MEhKb2xBdjNJYUJTaVVRZ2lnbUpHNDJveWppdjl6YlNXYgprMTVDRWNuNzhJQVdvU0dveTA1SElRaVdtdDRzWThpOXZmMWFxeXhpVWJMWjA1bGtDUTRVZTR6RlV3OE5FRDJ3ClhWNExuSXRaYXZBbkovTFRHYkY4YUZpcVV1S1VZWEduMWo5ekxhMENnWUFqMFVDRmZNbVNXZzRxUlYxZGhScG8KSUk2ZlBLQ1RmZTZHUzhPK2dzQXVOTmRXS1JldHRUK3U5MDQ4dkRuQnkrcWFtbHUrUnpiMGhsT3FqVTFjTU5YSgpFaS9XelBOMWVwaFQ5dlRJOW9kT1VIaFpJZHpLaUVVMUEySEkyVncwNWhmM1BBTDRzUXE3eDFSTVhndHI2L2g4Cks0bUZxNmVmMjBSQnBNT1NiTmxJUVFLQmdRQ0Zta2EveHJjMzUvNEpPU1Rrd0xqcU9pbDc5VXhuY2FDVDRwdG4KU0lvUmMrZndoMXZ6VkxTN1FwSmxpQ29JL0l1bFZEV3R0ZDAzRXE5YXRJUk8yNk02RkNSZ3VlRjhzemZkQTkxSApKQ3FHMDd0bTVHTzlVaGNvdWZWQ3FVTVFhRzM5SnowREZKaURMV2dVRGlQWmwvWXRVK1hFSnB4RWk3MUtlNzZoCitnYzhWUUtCZ1FDdzZQR0VuNHV1YTA4Q2VjTzl2NFAxUkRHaGJFb1E3KzJRb2o2aURxVDc4YTVGUXlrdXNYUGEKeHRvOENEK2VpZmlUVGl2N05TWG8xQVFFNUNrNVdlL1p1NEhlS00wbWsrYkMwTEdpTE54WVFTN1lsM2ZOdnlNeApCMzlXVysxazNZYjdUOXlKdkw2VmV5N21rRnJmSjQ5UFNFeVN5NlErOUZoR25QWDRLSll2Mmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
#  type: kubernetes.io/tls
#---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: books-store
  name: configmap
data:
  #name of the service of the deployment we need serves as a url.
  database_url: mongodb-service
---
apiVersion: v1
kind: Service
metadata:
  namespace: books-store
  name: mongodb-service
spec:
  selector:
    app: mongodb
  ports:
    - protocol: TCP
      port: 80
      targetPort: 27017
---
apiVersion: v1
kind: Service
metadata:
  name: angular-service
  namespace: books-store
spec:
  type: NodePort
  ports:
    - port: 80
      protocol: TCP
      targetPort: 80
  selector:
    app: angular-deployment
---
apiVersion: v1
kind: Service
metadata:
  name: spring-boot-service
  namespace: books-store
spec:
  type: NodePort
  ports:
    - port: 80
      protocol: TCP
      targetPort: 3000
  selector:
    app: spring-boot-deployment
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: dashboard-ingress
  namespace: books-store
spec:
  tls:
    - hosts:
        - books.com
      secretName: tls-secret
  rules:
    - host: books.com
      http:
        paths:
          - path: /
            backend:
              serviceName: angular-service
              servicePort: 80
          - path: /api
            backend:
              serviceName: spring-boot-service
              servicePort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: books-store
  name: mongodb-deployment
  labels:
    app: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo
          ports:
            - containerPort: 27017
#          env:
#            - name: MONGO_INITDB_ROOT_USERNAME
#              valueFrom:
#                secretKeyRef:
#                  name: mongodb-secret
#                  key: mongo-root-username
#            - name: MONGO_INITDB_ROOT_PASSWORD
#              valueFrom:
#                secretKeyRef:
#                  name: mongodb-secret
#                  key: mongo-root-password
---
apiVersion: apps/v1
kind: Deployment                                          # 1
metadata:
  name: angular-deployment
  namespace: books-store
  labels:
    app: angular-deployment
spec:
  selector:
    matchLabels:
      app: angular-deployment
  replicas: 2                                             # 2
  minReadySeconds: 15
  strategy:
    type: RollingUpdate                                   # 3
    rollingUpdate:
      maxUnavailable: 1                                   # 4
      maxSurge: 1                                         # 5
  template:
    metadata:
      labels:
        app: angular-deployment                                 # 6
    spec:
      containers:
        - image: einshtein89/books_frontend_mongo:1
          imagePullPolicy: Always                         # 7
          name: angular-deployment
          ports:
            - containerPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spring-boot-deployment
  namespace: books-store
  labels:
    app: spring-boot-deployment
spec:
  selector:
    matchLabels:
      app: spring-boot-deployment
  replicas: 2
  minReadySeconds: 15
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: spring-boot-deployment
    spec:
      containers:
        - image: einshtein89/books_backend_mongo:1
          imagePullPolicy: Always
          name: spring-boot-deployment
          ports:
            - containerPort: 3000
          env:
#            - name: ME_CONFIG_MONGODB_ADMINUSERNAME
#              valueFrom:
#                secretKeyRef:
#                  name: mongodb-secret
#                  key: mongo-root-username
#            - name: ME_CONFIG_MONGODB_ADMINPASSWORD
#              valueFrom:
#                secretKeyRef:
#                  name: mongodb-secret
#                  key: mongo-root-password
            - name: MONGODB_SERVER_URL
              value: mongodb-service:80         #port number should correspond to port from service